[1mdiff --git a/Back-End/.env b/Back-End/.env[m
[1mnew file mode 100644[m
[1mindex 0000000..f93176c[m
[1m--- /dev/null[m
[1m+++ b/Back-End/.env[m
[36m@@ -0,0 +1,4 @@[m
[32m+[m[32mDB_HOST=localhost[m
[32m+[m[32mDB_USER=admin[m
[32m+[m[32mDB_PASSWORD="#BakuCROW2020"[m
[32m+[m[32mDB_NAME=GreatWorks[m
[1mdiff --git a/Back-End/.gitignore b/Back-End/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..c2658d7[m
[1m--- /dev/null[m
[1m+++ b/Back-End/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mnode_modules/[m
[1mdiff --git a/Back-End/LICENSE b/Back-End/LICENSE[m
[1mnew file mode 100644[m
[1mindex 0000000..967abc7[m
[1m--- /dev/null[m
[1m+++ b/Back-End/LICENSE[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mMIT License[m
[32m+[m
[32m+[m[32mCopyright (c) 2025 Rod0002[m
[32m+[m
[32m+[m[32mPermission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32mof this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32min the Software without restriction, including without limitation the rights[m
[32m+[m[32mto use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32mcopies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32mfurnished to do so, subject to the following conditions:[m
[32m+[m
[32m+[m[32mThe above copyright notice and this permission notice shall be included in all[m
[32m+[m[32mcopies or substantial portions of the Software.[m
[32m+[m
[32m+[m[32mTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32mIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32mFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32mAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32mLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32mOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE[m
[32m+[m[32mSOFTWARE.[m
[1mdiff --git a/Back-End/README.md b/Back-End/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..e3d927b[m
[1m--- /dev/null[m
[1m+++ b/Back-End/README.md[m
[36m@@ -0,0 +1,152 @@[m
[32m+[m
[32m+[m[32m# üõí API de E-commerce de Camisetas[m
[32m+[m
[32m+[m[32mAPI RESTful constru√≠da com **Node.js**, **Express** e **MySQL**, que permite o cadastro de usu√°rios, login com autentica√ß√£o JWT e gerenciamento de produtos.[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## üìÅ Estrutura do Projeto[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m‚îú‚îÄ‚îÄ controllers/[m
[32m+[m[32m‚îÇ   ‚îú‚îÄ‚îÄ produtoController.js[m
[32m+[m[32m‚îÇ   ‚îî‚îÄ‚îÄ usuarioControllers.js[m
[32m+[m[32m‚îú‚îÄ‚îÄ middleware/[m
[32m+[m[32m‚îÇ   ‚îî‚îÄ‚îÄ auth.js[m
[32m+[m[32m‚îú‚îÄ‚îÄ models/[m
[32m+[m[32m‚îÇ   ‚îî‚îÄ‚îÄ db.js[m
[32m+[m[32m‚îú‚îÄ‚îÄ routes/[m
[32m+[m[32m‚îÇ   ‚îú‚îÄ‚îÄ produtos.js[m
[32m+[m[32m‚îÇ   ‚îî‚îÄ‚îÄ usuarios.js[m
[32m+[m[32m‚îú‚îÄ‚îÄ .env[m
[32m+[m[32m‚îú‚îÄ‚îÄ index.js[m
[32m+[m[32m‚îú‚îÄ‚îÄ package.json[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## üöÄ Tecnologias Utilizadas[m
[32m+[m
[32m+[m[32m- Node.js[m
[32m+[m[32m- Express[m
[32m+[m[32m- MySQL[m
[32m+[m[32m- JWT (jsonwebtoken)[m
[32m+[m[32m- bcryptjs[m
[32m+[m[32m- dotenv[m
[32m+[m[32m- cors[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## ‚öôÔ∏è Instala√ß√£o[m
[32m+[m
[32m+[m[32m1. **Clone o reposit√≥rio:**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git clone https://github.com/Rod0002/GreatWorks-API.git[m
[32m+[m[32m   cd GreatWorks-API[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m2. **Instale as depend√™ncias:**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   npm install[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m3. **Configure o ambiente criando um `.env`:**[m
[32m+[m[32m   ```env[m
[32m+[m[32m   DB_HOST=localhost[m
[32m+[m[32m   DB_USER=root[m
[32m+[m[32m   DB_PASSWORD=sua_senha[m
[32m+[m[32m   DB_NAME=greatworks[m
[32m+[m[32m   PORT=3000[m
[32m+[m[32m   JWT_SECRET=segredo123[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m4. **Crie o banco de dados e as tabelas no MySQL:**[m
[32m+[m[32m   ```sql[m
[32m+[m[32m   CREATE TABLE tb_usuario ([m
[32m+[m[32m     id_usuario INT AUTO_INCREMENT PRIMARY KEY,[m
[32m+[m[32m     nome VARCHAR(100),[m
[32m+[m[32m     email VARCHAR(100) UNIQUE,[m
[32m+[m[32m     senha VARCHAR(255)[m
[32m+[m[32m   );[m
[32m+[m
[32m+[m[32m   CREATE TABLE tb_produto ([m
[32m+[m[32m     id_produto INT AUTO_INCREMENT PRIMARY KEY,[m
[32m+[m[32m     ds_categoria VARCHAR(100),[m
[32m+[m[32m     nm_produto VARCHAR(100),[m
[32m+[m[32m     ds_marca VARCHAR(100),[m
[32m+[m[32m     vl_preco DECIMAL(10,2),[m
[32m+[m[32m     qtd_disponivel INT,[m
[32m+[m[32m     ds_medida VARCHAR(20),[m
[32m+[m[32m     img_produto TEXT[m
[32m+[m[32m   );[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m5. **Inicie o servidor:**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   npm start[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## üîê Autentica√ß√£o[m
[32m+[m
[32m+[m[32mA autentica√ß√£o √© feita com JWT. Ap√≥s o login, o usu√°rio recebe um token que deve ser enviado no header das requisi√ß√µes protegidas:[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32mAuthorization: Bearer SEU_TOKEN_AQUI[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## üìå Rotas[m
[32m+[m
[32m+[m[32m### üßë‚Äçüíª Usu√°rios[m
[32m+[m
[32m+[m[32m- **POST** `/usuarios/register`[m[41m  [m
[32m+[m[32m  Registra um novo usu√°rio.[m[41m  [m
[32m+[m[32m  **Body:**[m
[32m+[m[32m  ```json[m
[32m+[m[32m  {[m
[32m+[m[32m    "nome": "Jo√£o",[m
[32m+[m[32m    "email": "joao@email.com",[m
[32m+[m[32m    "senha": "123456"[m
[32m+[m[32m  }[m
[32m+[m[32m  ```[m
[32m+[m
[32m+[m[32m- **POST** `/usuarios/login`[m[41m  [m
[32m+[m[32m  Realiza o login e retorna um token JWT.[m[41m  [m
[32m+[m[32m  **Body:**[m
[32m+[m[32m  ```json[m
[32m+[m[32m  {[m
[32m+[m[32m    "email": "joao@email.com",[m
[32m+[m[32m    "senha": "123456"[m
[32m+[m[32m  }[m
[32m+[m[32m  ```[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m### üì¶ Produtos[m
[32m+[m
[32m+[m[32m- **GET** `/produtos`[m[41m  [m
[32m+[m[32m  Lista todos os produtos.[m
[32m+[m
[32m+[m[32m- **POST** `/produtos`[m[41m  [m
[32m+[m[32m  Cria um novo produto. *(Futuramente essa rota poder√° exigir autentica√ß√£o)*[m[41m  [m
[32m+[m[32m  **Body:**[m
[32m+[m[32m  ```json[m
[32m+[m[32m  {[m
[32m+[m[32m    "ds_categoria": "Camiseta",[m
[32m+[m[32m    "nm_produto": "Camiseta Preta",[m
[32m+[m[32m    "ds_marca": "Marca X",[m
[32m+[m[32m    "vl_preco": 49.90,[m
[32m+[m[32m    "qtd_disponivel": 10,[m
[32m+[m[32m    "ds_medida": "M",[m
[32m+[m[32m    "img_produto": "http://imagem.com/produto.jpg"[m
[32m+[m[32m  }[m
[32m+[m[32m  ```[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## üìù Licen√ßa[m
[32m+[m
[32m+[m[32mEste projeto est√° licenciado sob a [MIT License](LICENSE).[m
[1mdiff --git a/Back-End/controllers/produtoController.js b/Back-End/controllers/produtoController.js[m
[1mnew file mode 100644[m
[1mindex 0000000..b81c12d[m
[1m--- /dev/null[m
[1m+++ b/Back-End/controllers/produtoController.js[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32m// Importa a conex√£o com o banco de dados MySQL, que foi configurada em '../models/db'[m
[32m+[m[32mconst db = require('../models/db');[m
[32m+[m
[32m+[m[32m// ===============================[m
[32m+[m[32m// ROTA: GET /produtos[m
[32m+[m[32m// Descri√ß√£o: Lista todos os produtos cadastrados no banco de dados[m
[32m+[m[32m// ===============================[m
[32m+[m[32mexports.listar = (req, res) => {[m
[32m+[m[32m  // Consulta SQL que seleciona os campos desejados da tabela de produtos[m
[32m+[m[32m  const query = `[m
[32m+[m[32m    SELECT id_produto, ds_categoria, nm_produto, ds_marca, vl_preco, qtd_disponivel, ds_medida, img_produto[m[41m [m
[32m+[m[32m    FROM tb_produto[m
[32m+[m[32m  `;[m
[32m+[m
[32m+[m[32m  // Executa a query no banco[m
[32m+[m[32m  db.query(query, (err, results) => {[m
[32m+[m[32m    if (err)[m[41m [m
[32m+[m[32m      // Se houver erro na consulta, retorna erro 500 (erro interno do servidor)[m
[32m+[m[32m      return res.status(500).json({ erro: err });[m
[32m+[m
[32m+[m[32m    // Se a consulta for bem-sucedida, retorna os resultados em formato JSON[m
[32m+[m[32m    res.json(results);[m
[32m+[m[32m  });[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// ===============================[m
[32m+[m[32m// ROTA: POST /produtos[m
[32m+[m[32m// Descri√ß√£o: Cadastra um novo produto no banco de dados[m
[32m+[m[32m// ===============================[m
[32m+[m[32mexports.criar = (req, res) => {[m
[32m+[m[32m  // Desestrutura os campos enviados no corpo da requisi√ß√£o[m
[32m+[m[32m  const { ds_categoria, nm_produto, ds_marca, vl_preco, qtd_disponivel, ds_medida, img_produto } = req.body;[m
[32m+[m
[32m+[m[32m  // Query SQL com placeholders (?) para evitar SQL Injection[m
[32m+[m[32m  const query = `[m
[32m+[m[32m    INSERT INTO tb_produto[m[41m [m
[32m+[m[32m    (ds_categoria, nm_produto, ds_marca, vl_preco, qtd_disponivel, ds_medida, img_produto)[m
[32m+[m[32m    VALUES (?, ?, ?, ?, ?, ?, ?)[m
[32m+[m[32m  `;[m
[32m+[m
[32m+[m[32m  // Executa a inser√ß√£o no banco com os dados enviados no body[m
[32m+[m[32m  db.query([m
[32m+[m[32m    query,[m
[32m+[m[32m    [ds_categoria, nm_produto, ds_marca, vl_preco, qtd_disponivel, ds_medida, img_produto],[m
[32m+[m[32m    (err, result) => {[m
[32m+[m[32m      if (err)[m[41m [m
[32m+[m[32m        // Se der erro ao inserir, retorna status 500[m
[32m+[m[32m        return res.status(500).json({ erro: err });[m
[32m+[m
[32m+[m[32m      // Retorna o ID gerado e os dados enviados no body com status 201 (criado)[m
[32m+[m[32m      res.status(201).json({ id_produto: result.insertId, ...req.body });[m
[32m+[m[32m    }[m
[32m+[m[32m  );[m
[32m+[m[32m};[m
[1mdiff --git a/Back-End/controllers/usuarioController.js b/Back-End/controllers/usuarioController.js[m
[1mnew file mode 100644[m
[1mindex 0000000..a091fa5[m
[1m--- /dev/null[m
[1m+++ b/Back-End/controllers/usuarioController.js[m
[36m@@ -0,0 +1,73 @@[m
[32m+[m[32m// Importa o m√≥dulo de conex√£o com o banco de dados[m
[32m+[m[32mconst db = require('../models/db');[m
[32m+[m
[32m+[m[32m// Importa o m√≥dulo bcryptjs para encripta√ß√£o de senhas[m
[32m+[m[32mconst bcrypt = require('bcryptjs');[m
[32m+[m
[32m+[m[32m// Importa o m√≥dulo jsonwebtoken (JWT) para cria√ß√£o de tokens[m
[32m+[m[32mconst jwt = require('jsonwebtoken');[m
[32m+[m
[32m+[m[32m// Definindo a chave secreta para JWT. O ideal √© colocar isso em um arquivo .env[m
[32m+[m[32mconst JWT_SECRET = process.env.JWT_SECRET || 'segredo123'; // Coloque isso no .env depois[m
[32m+[m
[32m+[m[32m// ===============================[m
[32m+[m[32m// FUN√á√ÉO: Registrar um novo usu√°rio[m
[32m+[m[32m// ===============================[m
[32m+[m[32mexports.registrar = (req, res) => {[m
[32m+[m[32m  // Desestrutura os dados recebidos no corpo da requisi√ß√£o (nome, email, senha)[m
[32m+[m[32m  const { nome, email, senha } = req.body;[m
[32m+[m
[32m+[m[32m  // Encripta a senha recebida usando bcrypt[m
[32m+[m[32m  bcrypt.hash(senha, 10, (err, hash) => {[m
[32m+[m[32m    if (err)[m[41m [m
[32m+[m[32m      // Se houver erro na encripta√ß√£o, retorna erro 500 (erro interno do servidor)[m
[32m+[m[32m      return res.status(500).json({ erro: err });[m
[32m+[m
[32m+[m[32m    // Query SQL para inserir o novo usu√°rio no banco de dados[m
[32m+[m[32m    const query = 'INSERT INTO tb_usuario (nome, email, senha) VALUES (?, ?, ?)';[m
[32m+[m
[32m+[m[32m    // Executa a query para inserir o novo usu√°rio[m
[32m+[m[32m    db.query(query, [nome, email, hash], (err, result) => {[m
[32m+[m[32m      if (err)[m[41m [m
[32m+[m[32m        // Se o email j√° existe ou houver outro erro na inser√ß√£o, retorna erro 500[m
[32m+[m[32m        return res.status(500).json({ erro: 'Email j√° existe ou erro ao inserir' });[m
[32m+[m
[32m+[m[32m      // Retorna mensagem de sucesso com status 201 (criado)[m
[32m+[m[32m      res.status(201).json({ msg: 'Usu√°rio registrado com sucesso!' });[m
[32m+[m[32m    });[m
[32m+[m[32m  });[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// ===============================[m
[32m+[m[32m// FUN√á√ÉO: Login do usu√°rio[m
[32m+[m[32m// ===============================[m
[32m+[m[32mexports.login = (req, res) => {[m
[32m+[m[32m  const { email, senha } = req.body;[m
[32m+[m
[32m+[m[32m  const query = 'SELECT * FROM tb_usuario WHERE email = ?';[m
[32m+[m
[32m+[m[32m  db.query(query, [email], (err, results) => {[m
[32m+[m[32m    if (err || results.length === 0) {[m
[32m+[m[32m      return res.status(401).json({ erro: 'Usu√°rio n√£o encontrado' });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    const usuario = results[0];[m
[32m+[m
[32m+[m[32m    bcrypt.compare(senha, usuario.senha, (err, match) => {[m
[32m+[m[32m      if (!match) return res.status(401).json({ erro: 'Senha incorreta' });[m
[32m+[m
[32m+[m[32m      const token = jwt.sign({ id: usuario.id_usuario, email: usuario.email }, JWT_SECRET, {[m
[32m+[m[32m        expiresIn: '2h',[m
[32m+[m[32m      });[m
[32m+[m
[32m+[m[32m      // üî• Aqui est√° o retorno com nome e id![m
[32m+[m[32m      res.json({[m
[32m+[m[32m        msg: 'Login realizado',[m
[32m+[m[32m        token,[m
[32m+[m[32m        id: usuario.id_usuario,[m
[32m+[m[32m        nome: usuario.nome,[m
[32m+[m[32m        email: usuario.email[m
[32m+[m[32m      });[m
[32m+[m[32m    });[m
[32m+[m[32m  });[m
[32m+[m[32m};[m
[1mdiff --git a/Back-End/index.js b/Back-End/index.js[m
[1mnew file mode 100644[m
[1mindex 0000000..09cdae0[m
[1m--- /dev/null[m
[1m+++ b/Back-End/index.js[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m// Importa o framework Express para criar o servidor[m
[32m+[m[32mconst express = require('express');[m
[32m+[m
[32m+[m[32m// Importa o driver mysql2 para conectar com o banco de dados MySQL[m
[32m+[m[32mconst mysql = require('mysql2');[m
[32m+[m
[32m+[m[32m// Importa o pacote CORS para permitir requisi√ß√µes de outros dom√≠nios (como o frontend)[m
[32m+[m[32mconst cors = require('cors');[m
[32m+[m
[32m+[m[32m// Carrega vari√°veis de ambiente do arquivo .env[m
[32m+[m[32mrequire('dotenv').config();[m
[32m+[m
[32m+[m[32m// Inicializa o app Express[m
[32m+[m[32mconst app = express();[m
[32m+[m
[32m+[m[32m// Aplica o middleware CORS (libera requisi√ß√µes cross-origin)[m
[32m+[m[32mapp.use(cors());[m
[32m+[m
[32m+[m[32m// Middleware para interpretar JSON no corpo das requisi√ß√µes[m
[32m+[m[32mapp.use(express.json());[m
[32m+[m
[32m+[m[32m// Configura a conex√£o com o banco de dados MySQL usando vari√°veis do .env[m
[32m+[m[32mconst db = mysql.createConnection({[m
[32m+[m[32m  host: process.env.DB_HOST,       // Ex: localhost[m
[32m+[m[32m  user: process.env.DB_USER,       // Ex: root[m
[32m+[m[32m  password: process.env.DB_PASSWORD, // Senha do banco[m
[32m+[m[32m  database: process.env.DB_NAME    // Nome do banco[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32m// Tenta conectar ao banco de dados MySQL[m
[32m+[m[32mdb.connect(err => {[m
[32m+[m[32m  if (err) return console.error('Erro na conex√£o:', err); // Se falhar, exibe erro[m
[32m+[m[32m  console.log('Conectado ao MySQL!'); // Sucesso[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32m// Importa e registra as rotas de produtos e usu√°rios[m
[32m+[m[32mconst produtoRoutes = require('./routes/produtos');[m
[32m+[m[32mconst usuarioRoutes = require('./routes/usuarios');[m
[32m+[m
[32m+[m[32m// Define os prefixos das rotas da API[m
[32m+[m[32mapp.use('/produtos', produtoRoutes); // Rotas de produtos: /produtos[m
[32m+[m[32mapp.use('/usuarios', usuarioRoutes); // Rotas de usu√°rios: /usuarios[m
[32m+[m
[32m+[m[32m// Define a porta em que o servidor vai rodar (usa a do .env ou padr√£o 3000)[m
[32m+[m[32mconst PORT = process.env.PORT || 3000;[m
[32m+[m
[32m+[m[32m// Inicia o servidor e exibe no console[m
[32m+[m[32mapp.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));[m
[32m+[m
[32m+[m[32m// Exporta a conex√£o com o banco de dados (pode ser usada em outros arquivos)[m
[32m+[m[32mmodule.exports = db;[m
[1mdiff --git a/Back-End/middleware/auth.js b/Back-End/middleware/auth.js[m
[1mnew file mode 100644[m
[1mindex 0000000..f06cba8[m
[1m--- /dev/null[m
[1m+++ b/Back-End/middleware/auth.js[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32m// Importa o m√≥dulo jsonwebtoken (JWT) para verificar o token[m
[32m+[m[32mconst jwt = require('jsonwebtoken');[m
[32m+[m
[32m+[m[32m// Middleware para autentica√ß√£o de token[m
[32m+[m[32mfunction autenticarToken(req, res, next) {[m
[32m+[m[32m  // Obt√©m o header 'Authorization' da requisi√ß√£o[m
[32m+[m[32m  const authHeader = req.headers['authorization'];[m
[32m+[m[41m  [m
[32m+[m[32m  // Se o header 'Authorization' existe, o token √© a segunda parte ap√≥s 'Bearer'[m
[32m+[m[32m  const token = authHeader && authHeader.split(' ')[1]; // Formato esperado: 'Bearer TOKEN'[m
[32m+[m
[32m+[m[32m  // Se n√£o houver token, retorna erro 401 (n√£o autorizado)[m
[32m+[m[32m  if (!token) return res.status(401).json({ msg: 'Token n√£o fornecido' });[m
[32m+[m
[32m+[m[32m  // Verifica se o token √© v√°lido[m
[32m+[m[32m  jwt.verify(token, process.env.JWT_SECRET, (err, usuario) => {[m
[32m+[m[32m    if (err)[m[41m [m
[32m+[m[32m      // Se houver erro ao verificar o token, retorna erro 403 (proibido)[m
[32m+[m[32m      return res.status(403).json({ msg: 'Token inv√°lido' });[m
[32m+[m
[32m+[m[32m    // Se o token for v√°lido, armazena os dados do usu√°rio no objeto req[m
[32m+[m[32m    // Agora voc√™ pode acessar req.usuario.id em outras rotas[m
[32m+[m[32m    req.usuario = usuario;[m
[32m+[m
[32m+[m[32m    // Chama a pr√≥xima fun√ß√£o/middleware[m
[32m+[m[32m    next();[m
[32m+[m[32m  });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Exporta a fun√ß√£o para ser usada em outras partes do projeto[m
[32m+[m[32mmodule.exports = autenticarToken;[m
[1mdiff --git a/Back-End/models/db.js b/Back-End/models/db.js[m
[1mnew file mode 100644[m
[1mindex 0000000..423f493[m
[1m--- /dev/null[m
[1m+++ b/Back-End/models/db.js[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m// Importa o m√≥dulo 'mysql2', que permite conectar e interagir com bancos de dados MySQL[m
[32m+[m[32mconst mysql = require('mysql2');[m
[32m+[m
[32m+[m[32m// Carrega vari√°veis de ambiente do arquivo .env (como DB_HOST, DB_USER, etc.)[m
[32m+[m[32mrequire('dotenv').config();[m
[32m+[m
[32m+[m[32m// Cria uma conex√£o com o banco de dados usando os dados das vari√°veis de ambiente[m
[32m+[m[32mconst db = mysql.createConnection({[m
[32m+[m[32m  host: process.env.DB_HOST,       // Endere√ßo do servidor MySQL (ex: 'localhost')[m
[32m+[m[32m  user: process.env.DB_USER,       // Nome do usu√°rio do banco (ex: 'root')[m
[32m+[m[32m  password: process.env.DB_PASSWORD, // Senha do banco[m
[32m+[m[32m  database: process.env.DB_NAME    // Nome do banco de dados (ex: 'greatworks')[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32m// Conecta ao banco e mostra no terminal se houve sucesso ou erro[m
[32m+[m[32mdb.connect(err => {[m
[32m+[m[32m  if (err)[m[41m [m
[32m+[m[32m    console.error('Erro na conex√£o:', err); // Exib